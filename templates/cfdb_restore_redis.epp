<%- | String $backup_dir,
      String $root_dir,
      String $user,
      String $service_name |
-%>
#!/bin/bash

root_dir=<%= $root_dir %>
service_name=<%= $service_name %>
user=<%= $user %>

data_dir=$root_dir/data

script=$(cat <<EOT

    redis_cmd() {
        /usr/bin/sudo -i -u $user /bin/dash -ex <<EOS
            . $root_dir/.redisrc.sh
            /usr/bin/redis-cli -h "\\\$DB_HOST" -p "\\\$DB_PORT" -a "\\\$ROOT_PASS" \$@
EOS
    }


    # make sure service is not running
    /bin/systemctl stop \${service_name}.service

    # backup old data, if any
    test -e "${data_dir}" && /bin/mv -f "${data_dir}" "${data_dir}.bak$(/bin/date '+%s')"

    /bin/mkdir $data_dir
    /bin/cp -a \${backup_dir}/dump.rds $data_dir/
    /bin/chown -R $user:$user $data_dir
        
    # Make sure to start as master
    restore_conf=$root_dir/conf/restore.conf
    /bin/sed \
        -e '/slaveof/d' -e '/appendonly/d' \
        $root_dir/conf/redis.conf >\$restore_conf
    echo "appendonly no" >> \$restore_conf
    /bin/chown $user:$user \$restore_conf

    /bin/mkdir /run/\$service_name
    /bin/chown $user:$user /run/\$service_name
    /usr/bin/sudo -i -u $user /usr/bin/redis-server \$restore_conf &

    while ! redis_cmd ping; do
        echo "Waiting startup"
        sleep 1
    done

    redis_cmd config set appendonly yes

    while redis_cmd info persistence | /bin/grep -q "aof_pending_rewrite:1"; do
        echo "Waiting AOF rewrite to start"
        sleep 1
    done

    while redis_cmd info persistence | /bin/grep -q "aof_rewrite_in_progress:1"; do
        echo "Waiting AOF rewrite to complete"
        sleep 1
    done

    echo "Shutting down"
    redis_cmd shutdown save
    wait

    /bin/rm -f $root_dir/conf/restore.conf
    /bin/sed -i '/slaveof/d' $root_dir/conf/redis.conf

    echo "Starting normal"
    /bin/systemctl start \${service_name}.service

EOT
)

<%= $cfbackup::periodic_restore_helper %> "<%= $user %>" "<%= $backup_dir %>" "<%= $service_name %>" "$script"
